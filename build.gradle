/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.6.2/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building a CLI application
    id 'application'

    id 'maven-publish'
    id "com.tngtech.jgiven.gradle-plugin" version "0.18.2"
    id 'findbugs'
    id 'pmd'
    
    id "com.github.kt3k.coveralls" version "2.4.0"
}

group = 'fr.duminy.desktop'
version = '0.0.1-SNAPSHOT'

def junitVersion = '5.5.2'

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

compileJava   {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

dependencies {
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:28.1-jre'
    implementation 'org.swinglabs.swingx:swingx-all:1.6.5-1'
    implementation 'org.slf4j:slf4j-api:2.0.0-alpha0'
    
    // Use JUnit Jupiter API for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:' + junitVersion
    testImplementation 'ch.qos.logback:logback-classic:1.3.0-alpha4', {
        exclude group:'slf4j-api', module:'org.slf4j'
    }
    testImplementation 'org.assertj:assertj-core:3.13.2'
    testImplementation 'org.assertj:assertj-swing:3.9.2', {
        exclude group:'org.assertj', module:'assertj-core'
    }
    testImplementation 'org.assertj:assertj-swing-junit:3.9.2', {
        exclude group:'junit', module:'junit'
    }
    testImplementation 'org.awaitility:awaitility:4.0.1'
    testImplementation 'com.tngtech.jgiven:jgiven-junit5:0.18.2', {
        exclude group:'com.google.guava', module:'guava'
        exclude group:'org.slf4j', module:'slf4j-api'
        exclude group:'net.bytebuddy', module:'byte-buddy'
    }
    testImplementation 'org.mockito:mockito-junit-jupiter:3.0.0', {
        exclude group:'org.junit.jupiter', module:'junit-jupiter-api'
    }

    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:' + junitVersion
}

application {
    // Define the main class for the application
    mainClassName = 'desktop.App'
}

test {
    // Use junit platform for unit tests
    useJUnitPlatform()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'desktop'
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'Desktop'
                description = 'A modular desktop written in java '
                url = 'https://github.com/fduminy/desktop'
                inceptionYear = '2012'
                licenses {
                    license {
                        name = 'LGPL 3.0'
                        url = 'http://www.gnu.org/licenses/lgpl-3.0.html'
                    }
                }
                developers {
                    developer {
                        id = 'fabien_duminy'
                        name = 'Fabien DUMINY'
                        email = 'fduminy at jnode dot org'
                        url = 'http://www.duminy.fr/'
                        timezone= '+1'
                    }
                }
                scm {
                    url = 'https://github.com/fduminy/desktop'
                    tag = 'HEAD'
                    connection = 'scm:git:git://git@github.com:fduminy/desktop.git'
                    developerConnection = 'scm:git:ssh://git@github.com:fduminy/desktop.git'
                }
            }
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

coveralls {
    jacocoReportPath = "${projectDir}/build/reports/jacoco/test/jacocoTestReport.xml"
}

//noinspection GrDeprecatedAPIUsage //TODO use SpotBugs when it will be fixed
tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
    effort = 'max'
    ignoreFailures = true //TODO set it to 'false' and fix bugs
    reportLevel = 'low'
}

tasks.withType(Pmd) {
    ignoreFailures = true //TODO set it to 'false' and fix bugs
}
//noinspection GroovyAccessibility
pmdTest.ruleSets = ["etc/pmd-rules-commons.xml", "etc/pmd-rules-test.xml"]
pmdMain.ruleSets = ["etc/pmd-rules-commons.xml", "etc/pmd-rules-main.xml"]